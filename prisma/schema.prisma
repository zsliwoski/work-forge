// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model WikiPage {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Team {
  id              String   @id @default(cuid())
  name            String
  description     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  members         User[]
  sprints         Sprint[] @relation("TeamSprints")
  tickets         Ticket[] @relation("TeamTickets")
  currentSprintId String?
}

model Sprint {
  id          String   @id @default(cuid())
  title       String
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
  Team        Team     @relation("TeamSprints", fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
}

model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    User?     @relation(fields: [userId], references: [id])
  userId      String?
  comments    Comment[]
  Sprint      Sprint?   @relation(fields: [sprintId], references: [id])
  sprintId    String?
  Team        Team      @relation("TeamTickets", fields: [teamId], references: [id])
  teamId      String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  emailVerified   Boolean?
  image           String?
  role            Int             @default(0)
  updatedAt       DateTime        @updatedAt
  createdAt       DateTime        @default(now())
  Account         Account[]
  Session         Session[]
  Authenticator   Authenticator[]
  assignedTicekts Ticket[]
  comments        Comment[]
  Team            Team?           @relation(fields: [teamId], references: [id])
  teamId          String?
  WikiPage        WikiPage[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
