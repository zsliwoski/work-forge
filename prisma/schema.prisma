// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Relationships
model UserToTeam {
  id        String   @id @default(cuid())
  User      User     @relation("UserRoles", fields: [userId], references: [id])
  userId    String
  Team      Team     @relation("TeamRoles", fields: [teamId], references: [id])
  teamId    String
  role      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
}

model TagsOnTicket {
  id       String @id @default(cuid())
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String
}

// Models
model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  role      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  Team      Team     @relation("TeamInvitations", fields: [teamId], references: [id])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teams       Team[]
  Owner       User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId     String
}

model WikiPage {
  id        String   @id @default(cuid())
  title     String
  summary   String?
  content   String
  category  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("AuthoredPages", fields: [authorId], references: [id])
  authorId  String
  Team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
}

model Team {
  id           String   @id @default(cuid())
  name         String
  ticketPrefix String   @default("TICKET")
  icon         String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sprints      Sprint[] @relation("TeamSprints")
  tickets      Ticket[] @relation("TeamTickets")

  currentSprintId String?
  nextSprintId    String?

  Organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  TeamRoles       UserToTeam[] @relation("TeamRoles")
  TeamInvitations TeamInvite[] @relation("TeamInvitations")
  Tags            Tag[]

  WikiPage WikiPage[]
}

model Sprint {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
  Team        Team     @relation("TeamSprints", fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
}

// TICKETS
model Ticket {
  id           String         @id @default(cuid())
  title        String
  description  String?
  priority     String         @default("NONE")
  status       String         @default("OPEN")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignee     User?          @relation(name: "AssignedTickets", fields: [assigneeId], references: [id])
  assigneeId   String?
  reporter     User           @relation(name: "ReportedTickets", fields: [reporterId], references: [id])
  reporterId   String
  comments     Comment[]
  Sprint       Sprint?        @relation(fields: [sprintId], references: [id])
  sprintId     String?
  Team         Team           @relation("TeamTickets", fields: [teamId], references: [id])
  teamId       String
  TagsOnTicket TagsOnTicket[]
}

model Tag {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  TagsOnTicket TagsOnTicket[]
  Team         Team           @relation(fields: [teamId], references: [id])
  teamId       String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
}

// USER 
model User {
  // Default next-auth required fields
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified Boolean?
  image         String?
  role          Int             @default(0)
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  Account       Account[]
  Session       Session[]
  Authenticator Authenticator[]

  // Relationships
  AuthoredPages   WikiPage[] @relation("AuthoredPages")
  AssignedTickets Ticket[]   @relation("AssignedTickets")
  ReportedTickets Ticket[]   @relation("ReportedTickets")
  comments        Comment[]

  // Permissions
  OwnedOrganizations Organization[] @relation("OrganizationOwner")
  TeamRoles          UserToTeam[]   @relation("UserRoles")

  @@index([email])
  @@map("users")
}

// USER AUTHENTICATION
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
